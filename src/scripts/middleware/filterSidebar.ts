import type { ReferenceDataEntry } from 'astro:content';
import { defineMiddleware } from 'astro:middleware';

export const onRequest = defineMiddleware((context, next) => {
        //filter autogenerated 'earth'

        context.locals.filterSidebar = (links: (ReferenceDataEntry<"structural", string> | ReferenceDataEntry<"docs", string> | ReferenceDataEntry<"about", string> | ReferenceDataEntry<"thesis", string> | ReferenceDataEntry<"metaThesis", string> | ReferenceDataEntry<"thesisParts", string> | ReferenceDataEntry<"earth", string> | ReferenceDataEntry<"library", string>)[] | undefined) => {

            //needs to be a list of links sent so filtering works
            if(links) {
                context.locals.starlightRoute.sidebar = context.locals.starlightRoute.sidebar.filter(
                (entry) =>
                    ( entry.label === 'earth' || entry.label === 'library' || entry.label === 'vignettes' || entry.label === 'mulch' )
                    ||
                    (
                        entry.type === 'link' &&
                        links.map(
                            (p) => {
                            const rawUrl = (s: string) => String(s).trim().replace(/\/+$/, '').toLowerCase();
                            console.log(rawUrl(p.id) + ',' + rawUrl(entry.href));
                            return rawUrl(p.id) === rawUrl(entry.href);
                        })
                    )
                );

                //TODO better error handling here
                return true;

            } else {
                return false;
            }
        }

        //console.log(context.locals);
        // i checked here and the function does exist in locals
        //but this happens after the other call :/

    return next();
});